{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["streamers","TBody","props","status","key","streamer","className","src","preview","alt","href","url","target","rel","THead","App","handleRadioClick","e","value","state","radio","map","item","name","checked","setState","stream","radioStatus","forEach","callAPI","bind","this","fetchJsonp","then","response","json","push","channel","small","catch","ex","console","log","tbody","listItems","r","toString","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68cd37de.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport fetchJsonp from 'fetch-jsonp';\n\n\nconst url = 'https://wind-bow.glitch.me/twitch-api/streams/'\nconst streamers = [\"freecodecamp\", \"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"storbeck\", \"habathcx\", \"RobotCaleb\", \"noobs2ninjas\"];\n\n// Show the Response of API\nconst TBody = props => (props.status === 'ONLINE') ? (\n  <tr key={props.streamer} className='online'>\n    <td> <img src={props.preview} alt='logo'></img></td>\n    <td>\n      <a href={props.url} target='_blank' rel=\"noopener noreferrer\">{props.streamer}</a>\n    </td>\n    <td> {props.status} </td>\n  </tr>\n) : (\n    <tr key={props.streamer} className='offline'>\n      <td> <img src={props.preview} alt='logo'></img></td>\n      <td>\n        <p>{props.streamer}</p>\n      </td>\n      <td> {props.status} </td>\n    </tr>\n  );\n\n//Table Title\nconst THead = props => (\n  <thead>\n    <tr>\n      <th>Logo</th>\n      <th>Streamer</th>\n      <th>Status</th>\n    </tr>\n  </thead>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      radio: [\n        { value: 'All', name: 'All', checked: true },\n        { value: 'ONLINE', name: 'ONLINE', checked: false },\n        { value: 'OFFLINE', name: 'OFFLINE', checked: false }\n      ],\n      stream: [],\n      radioStatus: 'All'\n    };\n    this.callAPI = this.callAPI.bind(this)\n    this.handleRadioClick = this.handleRadioClick.bind(this)\n    // Default view \n    streamers.forEach(this.callAPI)\n  }\n\n  // The callback parameter gets added automatically by fetch-jsonp.\n  callAPI(streamer) {\n    var radioStatus = this.state.radioStatus\n    fetchJsonp(url + streamer)\n      .then(function (response) {\n        return response.json()\n      }).then((json) => {\n        const stream = this.state.stream;\n        if (radioStatus === 'All') {\n          if (json.stream === null) {\n            stream.push({\n              streamer: streamer,\n              status: 'OFFLINE',\n              url: 'OFFLINE',\n              preview: 'OFFLINE'\n            })\n          }\n          else {\n            stream.push({\n              streamer: streamer,\n              status: 'ONLINE',\n              url: json.stream.channel.url,\n              preview: json.stream.preview.small\n            })\n          }\n        }\n        else if (radioStatus === 'ONLINE') {\n          if (json.stream !== null) {\n            stream.push({\n              streamer: streamer,\n              status: 'ONLINE',\n              url: json.stream.channel.url,\n              preview: json.stream.preview.small\n            })\n          }\n        }\n        else {\n          stream.push({\n            streamer: streamer,\n            status: 'OFFLINE',\n            url: 'OFFLINE',\n            preview: 'OFFLINE'\n          })\n        }\n        this.setState({\n          stream\n        })\n      }).catch(function (ex) {\n        console.log('parsing failed', ex)\n      })\n  };\n\n  handleRadioClick = e => {\n    const status = e.target.value;\n    const radio = this.state.radio;\n    // Need to operate the radio button by React\n    const value = radio.map((item) => {\n      return ({\n        value: item.value,\n        name: item.name,\n        checked: (item.value === status) ? true : false\n      })\n    });\n    this.setState({\n      radio: value, stream: [],\n      radioStatus: status\n    }, () => {\n      //after setState, call API\n      streamers.forEach(this.callAPI)\n    })\n  };\n\n  render() {\n    const stream = this.state.stream;\n    const tbody = stream.map(TBody);\n    const radio = this.state.radio;\n    const listItems = radio.map((r) =>\n      <label key={r.value.toString()} className={r.value}>\n        <input\n          type=\"radio\"\n          name=\"select\"\n          value={r.value}\n          checked={r.checked}\n          onChange={this.handleRadioClick} />\n        {r.name} <br />\n      </label>\n    );\n    return (\n      <div>\n        <div className='title'>\n          <h1>TWITCH STREAMERS</h1>\n          <form>{listItems}</form>\n        </div>\n        <div className='body'>\n          <table>\n            <THead />\n            <tbody>\n              {tbody}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}